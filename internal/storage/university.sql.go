// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: university.sql

package storage

import (
	"context"
)

const countUniversities = `-- name: CountUniversities :one
SELECT COUNT(*) FROM university
`

func (q *Queries) CountUniversities(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUniversities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUniversity = `-- name: CreateUniversity :exec
INSERT INTO university (
  name, code, department, province, city, school_level, property
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUniversityParams struct {
	Name        string
	Code        string
	Department  string
	Province    string
	City        string
	SchoolLevel string
	Property    string
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) error {
	_, err := q.db.ExecContext(ctx, createUniversity,
		arg.Name,
		arg.Code,
		arg.Department,
		arg.Province,
		arg.City,
		arg.SchoolLevel,
		arg.Property,
	)
	return err
}

const listUniversities = `-- name: ListUniversities :many
SELECT id, name, code, department, province, city, school_level, website, property, last_admission_time, create_time, update_time FROM university limit ? offset ?
`

type ListUniversitiesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUniversities(ctx context.Context, arg ListUniversitiesParams) ([]University, error) {
	rows, err := q.db.QueryContext(ctx, listUniversities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []University
	for rows.Next() {
		var i University
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Department,
			&i.Province,
			&i.City,
			&i.SchoolLevel,
			&i.Website,
			&i.Property,
			&i.LastAdmissionTime,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUniversityLastAdmissionTime = `-- name: UpdateUniversityLastAdmissionTime :exec
UPDATE university SET last_admission_time = ? where code = ?
`

type UpdateUniversityLastAdmissionTimeParams struct {
	LastAdmissionTime string
	Code              string
}

func (q *Queries) UpdateUniversityLastAdmissionTime(ctx context.Context, arg UpdateUniversityLastAdmissionTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateUniversityLastAdmissionTime, arg.LastAdmissionTime, arg.Code)
	return err
}
