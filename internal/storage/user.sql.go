// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package storage

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (
  username, password, email
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
}

const getUser = `-- name: GetUser :one
select id, username from user where username = ? and password = ?
`

type GetUserParams struct {
	Username string
	Password string
}

type GetUserRow struct {
	ID       int32
	Username string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Password)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, tel, email, balance, points, status, original_id, is_admin, create_time, update_time FROM user
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Tel,
			&i.Email,
			&i.Balance,
			&i.Points,
			&i.Status,
			&i.OriginalID,
			&i.IsAdmin,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
