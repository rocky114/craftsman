// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: school.sql

package storage

import (
	"context"
	"database/sql"
)

const createSchool = `-- name: CreateSchool :execresult
INSERT INTO school (
  name, code, department, location, level, remark
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateSchoolParams struct {
	Name       string
	Code       string
	Department string
	Location   string
	Level      string
	Remark     string
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSchool,
		arg.Name,
		arg.Code,
		arg.Department,
		arg.Location,
		arg.Level,
		arg.Remark,
	)
}

const listSchool = `-- name: ListSchool :many
SELECT id, name, code, department, location, level, website, remark, create_time, update_time FROM school limit ? offset ?
`

type ListSchoolParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSchool(ctx context.Context, arg ListSchoolParams) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, listSchool, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Department,
			&i.Location,
			&i.Level,
			&i.Website,
			&i.Remark,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
