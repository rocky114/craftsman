// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admission_score.sql

package sqlc

import (
	"context"
)

const createAdmissionScore = `-- name: CreateAdmissionScore :exec
INSERT INTO admission_score (
    id, university_name, year, province, admission_type, subject_category,
    major_name, highest_score, highest_score_rank, lowest_score, lowest_score_rank
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAdmissionScoreParams struct {
	ID               uint32 `db:"id"`
	UniversityName   string `db:"university_name"`
	Year             string `db:"year"`
	Province         string `db:"province"`
	AdmissionType    string `db:"admission_type"`
	SubjectCategory  string `db:"subject_category"`
	MajorName        string `db:"major_name"`
	HighestScore     string `db:"highest_score"`
	HighestScoreRank string `db:"highest_score_rank"`
	LowestScore      string `db:"lowest_score"`
	LowestScoreRank  string `db:"lowest_score_rank"`
}

func (q *Queries) CreateAdmissionScore(ctx context.Context, arg CreateAdmissionScoreParams) error {
	_, err := q.db.ExecContext(ctx, createAdmissionScore,
		arg.ID,
		arg.UniversityName,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
		arg.SubjectCategory,
		arg.MajorName,
		arg.HighestScore,
		arg.HighestScoreRank,
		arg.LowestScore,
		arg.LowestScoreRank,
	)
	return err
}

const deleteAdmissionScore = `-- name: DeleteAdmissionScore :exec
DELETE FROM admission_score
WHERE id = ?
`

func (q *Queries) DeleteAdmissionScore(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScore, id)
	return err
}

const deleteAdmissionScoreByYearAndUniversity = `-- name: DeleteAdmissionScoreByYearAndUniversity :exec
DELETE FROM admission_score
WHERE year = ? AND university_name = ?
`

type DeleteAdmissionScoreByYearAndUniversityParams struct {
	Year           string `db:"year"`
	UniversityName string `db:"university_name"`
}

func (q *Queries) DeleteAdmissionScoreByYearAndUniversity(ctx context.Context, arg DeleteAdmissionScoreByYearAndUniversityParams) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScoreByYearAndUniversity, arg.Year, arg.UniversityName)
	return err
}

const getAdmissionScoreByID = `-- name: GetAdmissionScoreByID :one
SELECT id, year, province, university_name, admission_type, subject_category, subject_category_txt, major_name, enrollment_quota, min_admission_score, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM admission_score 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAdmissionScoreByID(ctx context.Context, id uint32) (AdmissionScore, error) {
	row := q.db.QueryRowContext(ctx, getAdmissionScoreByID, id)
	var i AdmissionScore
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Province,
		&i.UniversityName,
		&i.AdmissionType,
		&i.SubjectCategory,
		&i.SubjectCategoryTxt,
		&i.MajorName,
		&i.EnrollmentQuota,
		&i.MinAdmissionScore,
		&i.HighestScore,
		&i.HighestScoreRank,
		&i.LowestScore,
		&i.LowestScoreRank,
		&i.CreateTime,
	)
	return i, err
}
