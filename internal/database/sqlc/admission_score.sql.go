// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admission_score.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAdmissionScore = `-- name: CreateAdmissionScore :exec
INSERT INTO admission_score (
    id, university_name, year, province, admission_type, subject_category,
    major_name, enrollment_quota, min_admission_score,
    highest_score, highest_score_rank, lowest_score, lowest_score_rank
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAdmissionScoreParams struct {
	ID                uint32         `json:"id"`
	UniversityName    string         `json:"university_name"`
	Year              string         `json:"year"`
	Province          string         `json:"province"`
	AdmissionType     string         `json:"admission_type"`
	SubjectCategory   string         `json:"subject_category"`
	MajorName         sql.NullString `json:"major_name"`
	EnrollmentQuota   sql.NullString `json:"enrollment_quota"`
	MinAdmissionScore sql.NullString `json:"min_admission_score"`
	HighestScore      sql.NullString `json:"highest_score"`
	HighestScoreRank  sql.NullString `json:"highest_score_rank"`
	LowestScore       sql.NullString `json:"lowest_score"`
	LowestScoreRank   sql.NullString `json:"lowest_score_rank"`
}

func (q *Queries) CreateAdmissionScore(ctx context.Context, arg CreateAdmissionScoreParams) error {
	_, err := q.db.ExecContext(ctx, createAdmissionScore,
		arg.ID,
		arg.UniversityName,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
		arg.SubjectCategory,
		arg.MajorName,
		arg.EnrollmentQuota,
		arg.MinAdmissionScore,
		arg.HighestScore,
		arg.HighestScoreRank,
		arg.LowestScore,
		arg.LowestScoreRank,
	)
	return err
}

const deleteAdmissionScore = `-- name: DeleteAdmissionScore :exec
DELETE FROM admission_score
WHERE id = ?
`

func (q *Queries) DeleteAdmissionScore(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScore, id)
	return err
}

const deleteAdmissionScoreByYearAndUniversity = `-- name: DeleteAdmissionScoreByYearAndUniversity :exec
DELETE FROM admission_score
WHERE year = ? AND university_name = ?
`

type DeleteAdmissionScoreByYearAndUniversityParams struct {
	Year           string `json:"year"`
	UniversityName string `json:"university_name"`
}

func (q *Queries) DeleteAdmissionScoreByYearAndUniversity(ctx context.Context, arg DeleteAdmissionScoreByYearAndUniversityParams) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScoreByYearAndUniversity, arg.Year, arg.UniversityName)
	return err
}

const getAdmissionScoreByID = `-- name: GetAdmissionScoreByID :one
SELECT id, year, university_name, province, admission_type, subject_category, subject_category_txt, major_name, enrollment_quota, min_admission_score, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM admission_score 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAdmissionScoreByID(ctx context.Context, id uint32) (AdmissionScore, error) {
	row := q.db.QueryRowContext(ctx, getAdmissionScoreByID, id)
	var i AdmissionScore
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.UniversityName,
		&i.Province,
		&i.AdmissionType,
		&i.SubjectCategory,
		&i.SubjectCategoryTxt,
		&i.MajorName,
		&i.EnrollmentQuota,
		&i.MinAdmissionScore,
		&i.HighestScore,
		&i.HighestScoreRank,
		&i.LowestScore,
		&i.LowestScoreRank,
		&i.CreateTime,
	)
	return i, err
}

const listAdmissionScores = `-- name: ListAdmissionScores :many
SELECT id, year, university_name, province, admission_type, subject_category, subject_category_txt, major_name, enrollment_quota, min_admission_score, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM admission_score 
ORDER BY id ASC
`

func (q *Queries) ListAdmissionScores(ctx context.Context) ([]AdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdmissionScore
	for rows.Next() {
		var i AdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.UniversityName,
			&i.Province,
			&i.AdmissionType,
			&i.SubjectCategory,
			&i.SubjectCategoryTxt,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmissionScoresByUniversityAndYear = `-- name: ListAdmissionScoresByUniversityAndYear :many
SELECT id, year, university_name, province, admission_type, subject_category, subject_category_txt, major_name, enrollment_quota, min_admission_score, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM admission_score 
WHERE university_name = ? AND year = ?
ORDER BY id ASC
`

type ListAdmissionScoresByUniversityAndYearParams struct {
	UniversityName string `json:"university_name"`
	Year           string `json:"year"`
}

func (q *Queries) ListAdmissionScoresByUniversityAndYear(ctx context.Context, arg ListAdmissionScoresByUniversityAndYearParams) ([]AdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScoresByUniversityAndYear, arg.UniversityName, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdmissionScore
	for rows.Next() {
		var i AdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.UniversityName,
			&i.Province,
			&i.AdmissionType,
			&i.SubjectCategory,
			&i.SubjectCategoryTxt,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
