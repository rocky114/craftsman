// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admission_query_condition.sql

package sqlc

import (
	"context"
)

const createQueryCondition = `-- name: CreateQueryCondition :exec
INSERT INTO admission_query_condition (
    university_name, url, year, province, admission_type
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateQueryConditionParams struct {
	UniversityName string `db:"university_name"`
	Url            string `db:"url"`
	Year           string `db:"year"`
	Province       string `db:"province"`
	AdmissionType  string `db:"admission_type"`
}

func (q *Queries) CreateQueryCondition(ctx context.Context, arg CreateQueryConditionParams) error {
	_, err := q.db.ExecContext(ctx, createQueryCondition,
		arg.UniversityName,
		arg.Url,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
	)
	return err
}

const deleteQueryCondition = `-- name: DeleteQueryCondition :exec
DELETE FROM admission_query_condition
WHERE id = ?
`

func (q *Queries) DeleteQueryCondition(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteQueryCondition, id)
	return err
}

const getQueryConditionByID = `-- name: GetQueryConditionByID :one
SELECT id, university_name, url, year, province, admission_type, create_time FROM admission_query_condition 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetQueryConditionByID(ctx context.Context, id int32) (AdmissionQueryCondition, error) {
	row := q.db.QueryRowContext(ctx, getQueryConditionByID, id)
	var i AdmissionQueryCondition
	err := row.Scan(
		&i.ID,
		&i.UniversityName,
		&i.Url,
		&i.Year,
		&i.Province,
		&i.AdmissionType,
		&i.CreateTime,
	)
	return i, err
}

const getQueryConditionByYearAndName = `-- name: GetQueryConditionByYearAndName :one
SELECT id, university_name, url, year, province, admission_type, create_time FROM admission_query_condition 
WHERE year = ? AND university_name = ? LIMIT 1
`

type GetQueryConditionByYearAndNameParams struct {
	Year           string `db:"year"`
	UniversityName string `db:"university_name"`
}

func (q *Queries) GetQueryConditionByYearAndName(ctx context.Context, arg GetQueryConditionByYearAndNameParams) (AdmissionQueryCondition, error) {
	row := q.db.QueryRowContext(ctx, getQueryConditionByYearAndName, arg.Year, arg.UniversityName)
	var i AdmissionQueryCondition
	err := row.Scan(
		&i.ID,
		&i.UniversityName,
		&i.Url,
		&i.Year,
		&i.Province,
		&i.AdmissionType,
		&i.CreateTime,
	)
	return i, err
}

const listQueryConditions = `-- name: ListQueryConditions :many
SELECT id, university_name, url, year, province, admission_type, create_time FROM admission_query_condition 
ORDER BY create_time DESC
`

func (q *Queries) ListQueryConditions(ctx context.Context) ([]AdmissionQueryCondition, error) {
	rows, err := q.db.QueryContext(ctx, listQueryConditions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdmissionQueryCondition
	for rows.Next() {
		var i AdmissionQueryCondition
		if err := rows.Scan(
			&i.ID,
			&i.UniversityName,
			&i.Url,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQueryConditionsByYear = `-- name: ListQueryConditionsByYear :many
SELECT id, university_name, url, year, province, admission_type, create_time FROM admission_query_condition 
WHERE year = ?
ORDER BY create_time DESC
`

func (q *Queries) ListQueryConditionsByYear(ctx context.Context, year string) ([]AdmissionQueryCondition, error) {
	rows, err := q.db.QueryContext(ctx, listQueryConditionsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdmissionQueryCondition
	for rows.Next() {
		var i AdmissionQueryCondition
		if err := rows.Scan(
			&i.ID,
			&i.UniversityName,
			&i.Url,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQueryCondition = `-- name: UpdateQueryCondition :exec
UPDATE admission_query_condition
SET
    university_name = ?,
    url = ?,
    year = ?,
    province = ?,
    admission_type = ?
WHERE id = ?
`

type UpdateQueryConditionParams struct {
	UniversityName string `db:"university_name"`
	Url            string `db:"url"`
	Year           string `db:"year"`
	Province       string `db:"province"`
	AdmissionType  string `db:"admission_type"`
	ID             int32  `db:"id"`
}

func (q *Queries) UpdateQueryCondition(ctx context.Context, arg UpdateQueryConditionParams) error {
	_, err := q.db.ExecContext(ctx, updateQueryCondition,
		arg.UniversityName,
		arg.Url,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
		arg.ID,
	)
	return err
}
