// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: university_admission_score.sql

package sqlc

import (
	"context"
)

const createAdmissionScore = `-- name: CreateAdmissionScore :exec
INSERT INTO university_admission_score (
    university_id, year, province, admission_type, academic_category,
    major_name, enrollment_quota, min_admission_score, min_admission_rank,
    highest_score, highest_score_rank, lowest_score, lowest_score_rank
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAdmissionScoreParams struct {
	UniversityID      uint32 `json:"university_id"`
	Year              string `json:"year"`
	Province          string `json:"province"`
	AdmissionType     string `json:"admission_type"`
	AcademicCategory  string `json:"academic_category"`
	MajorName         string `json:"major_name"`
	EnrollmentQuota   string `json:"enrollment_quota"`
	MinAdmissionScore string `json:"min_admission_score"`
	MinAdmissionRank  string `json:"min_admission_rank"`
	HighestScore      string `json:"highest_score"`
	HighestScoreRank  string `json:"highest_score_rank"`
	LowestScore       string `json:"lowest_score"`
	LowestScoreRank   string `json:"lowest_score_rank"`
}

func (q *Queries) CreateAdmissionScore(ctx context.Context, arg CreateAdmissionScoreParams) error {
	_, err := q.db.ExecContext(ctx, createAdmissionScore,
		arg.UniversityID,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
		arg.AcademicCategory,
		arg.MajorName,
		arg.EnrollmentQuota,
		arg.MinAdmissionScore,
		arg.MinAdmissionRank,
		arg.HighestScore,
		arg.HighestScoreRank,
		arg.LowestScore,
		arg.LowestScoreRank,
	)
	return err
}

const deleteAdmissionScore = `-- name: DeleteAdmissionScore :exec
DELETE FROM university_admission_score
WHERE id = ?
`

func (q *Queries) DeleteAdmissionScore(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScore, id)
	return err
}

const getAdmissionScoreByID = `-- name: GetAdmissionScoreByID :one
SELECT id, university_id, year, province, admission_type, academic_category, major_name, enrollment_quota, min_admission_score, min_admission_rank, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM university_admission_score 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAdmissionScoreByID(ctx context.Context, id uint32) (UniversityAdmissionScore, error) {
	row := q.db.QueryRowContext(ctx, getAdmissionScoreByID, id)
	var i UniversityAdmissionScore
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Year,
		&i.Province,
		&i.AdmissionType,
		&i.AcademicCategory,
		&i.MajorName,
		&i.EnrollmentQuota,
		&i.MinAdmissionScore,
		&i.MinAdmissionRank,
		&i.HighestScore,
		&i.HighestScoreRank,
		&i.LowestScore,
		&i.LowestScoreRank,
		&i.CreateTime,
	)
	return i, err
}

const listAdmissionScores = `-- name: ListAdmissionScores :many
SELECT id, university_id, year, province, admission_type, academic_category, major_name, enrollment_quota, min_admission_score, min_admission_rank, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM university_admission_score 
ORDER BY create_time DESC
`

func (q *Queries) ListAdmissionScores(ctx context.Context) ([]UniversityAdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UniversityAdmissionScore
	for rows.Next() {
		var i UniversityAdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.AcademicCategory,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.MinAdmissionRank,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmissionScoresByTypeAndCategory = `-- name: ListAdmissionScoresByTypeAndCategory :many
SELECT id, university_id, year, province, admission_type, academic_category, major_name, enrollment_quota, min_admission_score, min_admission_rank, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM university_admission_score 
WHERE admission_type = ? AND academic_category = ?
ORDER BY year DESC, province
`

type ListAdmissionScoresByTypeAndCategoryParams struct {
	AdmissionType    string `json:"admission_type"`
	AcademicCategory string `json:"academic_category"`
}

func (q *Queries) ListAdmissionScoresByTypeAndCategory(ctx context.Context, arg ListAdmissionScoresByTypeAndCategoryParams) ([]UniversityAdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScoresByTypeAndCategory, arg.AdmissionType, arg.AcademicCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UniversityAdmissionScore
	for rows.Next() {
		var i UniversityAdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.AcademicCategory,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.MinAdmissionRank,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmissionScoresByUniversity = `-- name: ListAdmissionScoresByUniversity :many
SELECT id, university_id, year, province, admission_type, academic_category, major_name, enrollment_quota, min_admission_score, min_admission_rank, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM university_admission_score 
WHERE university_id = ?
ORDER BY year DESC, create_time DESC
`

func (q *Queries) ListAdmissionScoresByUniversity(ctx context.Context, universityID uint32) ([]UniversityAdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScoresByUniversity, universityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UniversityAdmissionScore
	for rows.Next() {
		var i UniversityAdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.AcademicCategory,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.MinAdmissionRank,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmissionScoresByYearAndProvince = `-- name: ListAdmissionScoresByYearAndProvince :many
SELECT id, university_id, year, province, admission_type, academic_category, major_name, enrollment_quota, min_admission_score, min_admission_rank, highest_score, highest_score_rank, lowest_score, lowest_score_rank, create_time FROM university_admission_score 
WHERE year = ? AND province = ?
ORDER BY university_id, admission_type, academic_category
`

type ListAdmissionScoresByYearAndProvinceParams struct {
	Year     string `json:"year"`
	Province string `json:"province"`
}

func (q *Queries) ListAdmissionScoresByYearAndProvince(ctx context.Context, arg ListAdmissionScoresByYearAndProvinceParams) ([]UniversityAdmissionScore, error) {
	rows, err := q.db.QueryContext(ctx, listAdmissionScoresByYearAndProvince, arg.Year, arg.Province)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UniversityAdmissionScore
	for rows.Next() {
		var i UniversityAdmissionScore
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Year,
			&i.Province,
			&i.AdmissionType,
			&i.AcademicCategory,
			&i.MajorName,
			&i.EnrollmentQuota,
			&i.MinAdmissionScore,
			&i.MinAdmissionRank,
			&i.HighestScore,
			&i.HighestScoreRank,
			&i.LowestScore,
			&i.LowestScoreRank,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmissionScore = `-- name: UpdateAdmissionScore :exec
UPDATE university_admission_score
SET 
    university_id = ?,
    year = ?,
    province = ?,
    admission_type = ?,
    academic_category = ?,
    major_name = ?,
    enrollment_quota = ?,
    min_admission_score = ?,
    min_admission_rank = ?,
    highest_score = ?,
    highest_score_rank = ?,
    lowest_score = ?,
    lowest_score_rank = ?
WHERE id = ?
`

type UpdateAdmissionScoreParams struct {
	UniversityID      uint32 `json:"university_id"`
	Year              string `json:"year"`
	Province          string `json:"province"`
	AdmissionType     string `json:"admission_type"`
	AcademicCategory  string `json:"academic_category"`
	MajorName         string `json:"major_name"`
	EnrollmentQuota   string `json:"enrollment_quota"`
	MinAdmissionScore string `json:"min_admission_score"`
	MinAdmissionRank  string `json:"min_admission_rank"`
	HighestScore      string `json:"highest_score"`
	HighestScoreRank  string `json:"highest_score_rank"`
	LowestScore       string `json:"lowest_score"`
	LowestScoreRank   string `json:"lowest_score_rank"`
	ID                uint32 `json:"id"`
}

func (q *Queries) UpdateAdmissionScore(ctx context.Context, arg UpdateAdmissionScoreParams) error {
	_, err := q.db.ExecContext(ctx, updateAdmissionScore,
		arg.UniversityID,
		arg.Year,
		arg.Province,
		arg.AdmissionType,
		arg.AcademicCategory,
		arg.MajorName,
		arg.EnrollmentQuota,
		arg.MinAdmissionScore,
		arg.MinAdmissionRank,
		arg.HighestScore,
		arg.HighestScoreRank,
		arg.LowestScore,
		arg.LowestScoreRank,
		arg.ID,
	)
	return err
}
