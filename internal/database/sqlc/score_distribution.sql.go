// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: score_distribution.sql

package sqlc

import (
	"context"
)

const deleteScoreDistribution = `-- name: DeleteScoreDistribution :exec
DELETE FROM score_distribution WHERE id = ?
`

func (q *Queries) DeleteScoreDistribution(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteScoreDistribution, id)
	return err
}

const getScoreDistributionByID = `-- name: GetScoreDistributionByID :one
SELECT id, year, province, subject_category, score_range, same_score_count, cumulative_count FROM score_distribution WHERE id = ?
`

func (q *Queries) GetScoreDistributionByID(ctx context.Context, id int32) (ScoreDistribution, error) {
	row := q.db.QueryRowContext(ctx, getScoreDistributionByID, id)
	var i ScoreDistribution
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Province,
		&i.SubjectCategory,
		&i.ScoreRange,
		&i.SameScoreCount,
		&i.CumulativeCount,
	)
	return i, err
}

const insertScoreDistribution = `-- name: InsertScoreDistribution :exec
INSERT INTO score_distribution (
    year, province, subject_category, score_range, same_score_count, cumulative_count
) VALUES (?, ?, ?, ?, ?, ?)
`

type InsertScoreDistributionParams struct {
	Year            string `db:"year"`
	Province        string `db:"province"`
	SubjectCategory string `db:"subject_category"`
	ScoreRange      string `db:"score_range"`
	SameScoreCount  string `db:"same_score_count"`
	CumulativeCount string `db:"cumulative_count"`
}

func (q *Queries) InsertScoreDistribution(ctx context.Context, arg InsertScoreDistributionParams) error {
	_, err := q.db.ExecContext(ctx, insertScoreDistribution,
		arg.Year,
		arg.Province,
		arg.SubjectCategory,
		arg.ScoreRange,
		arg.SameScoreCount,
		arg.CumulativeCount,
	)
	return err
}

const updateScoreDistribution = `-- name: UpdateScoreDistribution :exec
UPDATE score_distribution
SET
    year = ?,
    province = ?,
    subject_category = ?,
    score_range = ?,
    same_score_count = ?,
    cumulative_count = ?
WHERE id = ?
`

type UpdateScoreDistributionParams struct {
	Year            string `db:"year"`
	Province        string `db:"province"`
	SubjectCategory string `db:"subject_category"`
	ScoreRange      string `db:"score_range"`
	SameScoreCount  string `db:"same_score_count"`
	CumulativeCount string `db:"cumulative_count"`
	ID              int32  `db:"id"`
}

func (q *Queries) UpdateScoreDistribution(ctx context.Context, arg UpdateScoreDistributionParams) error {
	_, err := q.db.ExecContext(ctx, updateScoreDistribution,
		arg.Year,
		arg.Province,
		arg.SubjectCategory,
		arg.ScoreRange,
		arg.SameScoreCount,
		arg.CumulativeCount,
		arg.ID,
	)
	return err
}
