// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admission_score_line.sql

package sqlc

import (
	"context"
)

const createAdmissionScoreLine = `-- name: CreateAdmissionScoreLine :exec
INSERT INTO admission_score_line (
    year,
    province,
    university_name,
    admission_batch,
    admission_type,
    subject_category,
    major_group,
    lowest_score,
    lowest_score_rank
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAdmissionScoreLineParams struct {
	Year            string `db:"year"`
	Province        string `db:"province"`
	UniversityName  string `db:"university_name"`
	AdmissionBatch  string `db:"admission_batch"`
	AdmissionType   string `db:"admission_type"`
	SubjectCategory string `db:"subject_category"`
	MajorGroup      string `db:"major_group"`
	LowestScore     string `db:"lowest_score"`
	LowestScoreRank string `db:"lowest_score_rank"`
}

// 插入操作
func (q *Queries) CreateAdmissionScoreLine(ctx context.Context, arg CreateAdmissionScoreLineParams) error {
	_, err := q.db.ExecContext(ctx, createAdmissionScoreLine,
		arg.Year,
		arg.Province,
		arg.UniversityName,
		arg.AdmissionBatch,
		arg.AdmissionType,
		arg.SubjectCategory,
		arg.MajorGroup,
		arg.LowestScore,
		arg.LowestScoreRank,
	)
	return err
}

const deleteAdmissionScoreLine = `-- name: DeleteAdmissionScoreLine :exec
DELETE FROM admission_score_line
WHERE id = ?
`

// 删除操作
func (q *Queries) DeleteAdmissionScoreLine(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmissionScoreLine, id)
	return err
}

const getAdmissionScoreLineByID = `-- name: GetAdmissionScoreLineByID :one
SELECT id, year, province, university_name, admission_batch, admission_type, subject_category, major_group, lowest_score, lowest_score_rank, create_time FROM admission_score_line
WHERE id = ?
`

// 通过ID查询
func (q *Queries) GetAdmissionScoreLineByID(ctx context.Context, id uint32) (AdmissionScoreLine, error) {
	row := q.db.QueryRowContext(ctx, getAdmissionScoreLineByID, id)
	var i AdmissionScoreLine
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Province,
		&i.UniversityName,
		&i.AdmissionBatch,
		&i.AdmissionType,
		&i.SubjectCategory,
		&i.MajorGroup,
		&i.LowestScore,
		&i.LowestScoreRank,
		&i.CreateTime,
	)
	return i, err
}
